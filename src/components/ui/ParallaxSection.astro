---
interface Props {
  class?: string;
  backgroundImage?: string;
  speed?: number;
  id?: string;
}

const { 
  class: className = '', 
  backgroundImage,
  speed = 0.5,
  id
} = Astro.props;
---

<section id={id} class={`parallax-section relative overflow-hidden ${className}`} data-speed={speed}>
  {backgroundImage && (
    <div 
      class="absolute inset-0 w-full h-full -z-10 bg-cover bg-center" 
      style={`background-image: url(${backgroundImage})`}
      data-speed={speed * 1.2}
    ></div>
  )}
  <div class="relative z-10">
    <slot />
  </div>
</section>

<script type="module">
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  
  gsap.registerPlugin(ScrollTrigger);
  
  document.addEventListener("DOMContentLoaded", () => {
    /** @type {NodeListOf<HTMLElement>} */
    const parallaxSections = document.querySelectorAll(".parallax-section");
    
    parallaxSections.forEach((section) => {
      const speed = parseFloat(section.getAttribute("data-speed") || "0.5");
      /** @type {NodeListOf<HTMLElement>} */
      const bgElements = section.querySelectorAll("[data-speed]");
      
      // Create parallax effect for background elements
      bgElements.forEach((el) => {
        const bgSpeed = parseFloat(el.getAttribute("data-speed") || "0.5");
        
        gsap.to(el, {
          y: () => (ScrollTrigger.maxScroll(window) * bgSpeed),
          ease: "none",
          scrollTrigger: {
            trigger: section,
            start: "top bottom",
            end: "bottom top",
            scrub: true,
            invalidateOnRefresh: true,
          }
        });
      });
      
      // Create parallax effect for the section content
      gsap.from(section.querySelector(".relative"), {
        y: 50 * speed,
        opacity: 0.8,
        duration: 1,
        ease: "power2.out",
        scrollTrigger: {
          trigger: section,
          start: "top 80%",
          toggleActions: "play none none reverse"
        }
      });
    });
  });
  </script>
