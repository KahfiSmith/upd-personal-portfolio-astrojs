---
import "../styles/global.css";

interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<html lang="id">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    {description && <meta name="description" content={description} />}
  </head>
  <body class="bg-[#0b0f1a] text-neutral-100 antialiased min-h-screen">
    <div id="page-transition-overlay" class="fixed inset-0 z-50 bg-neutral-950 pointer-events-none transform scale-y-0 origin-top"></div>
    <noscript><style>#page-transition-overlay{display:none !important}</style></noscript>

    <slot />

    <div class="fixed bottom-4 right-4 z-50 flex items-center gap-2" aria-hidden="true">
      <span class="text-xs text-neutral-400">GSAP</span>
      <div data-gsap-test class="h-3 w-3 rounded-full bg-emerald-400 shadow-[0_0_12px_#34d399]"></div>
    </div>

    <script type="module">
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";
      gsap.registerPlugin(ScrollTrigger);

      // Reveal overlay if it were visible (defensive)
      const overlay = document.querySelector('#page-transition-overlay');
      if (overlay) {
        gsap.set(overlay, { transformOrigin: 'top' });
        // Only animate if overlay is actually visible
        if (getComputedStyle(overlay).transform.includes('matrix(1') || overlay.classList.contains('scale-y-100')) {
          gsap.to(overlay, { scaleY: 0, duration: 1, ease: 'power4.inOut' });
        }
      }

      // Small utility animations
      document.addEventListener('DOMContentLoaded', () => {
        const badge = document.querySelector('[data-gsap-test]');
        if (badge) {
          gsap.to(badge, {
            scale: 1.4,
            opacity: 0.6,
            duration: 0.6,
            ease: 'sine.inOut',
            yoyo: true,
            repeat: -1,
            transformOrigin: 'center center',
          });
        }

        gsap.utils.toArray('[data-animate]').forEach((el) => {
          const type = el.getAttribute('data-animate');
          const delay = parseFloat(el.getAttribute('data-delay') || '0');
          if (type === 'fade-up') {
            gsap.from(el, { y: 30, opacity: 0, duration: 0.8, ease: 'power3.out', delay, scrollTrigger: { trigger: el, start: 'top 85%' } });
          } else if (type === 'fade-in') {
            gsap.from(el, { opacity: 0, duration: 0.6, ease: 'power2.out', delay, scrollTrigger: { trigger: el, start: 'top 90%' } });
          } else if (type === 'scale-in') {
            gsap.from(el, { scale: 0.85, opacity: 0, duration: 0.7, ease: 'back.out(1.4)', delay, scrollTrigger: { trigger: el, start: 'top 85%' } });
          }
        });
      });
    </script>
  </body>
</html>

